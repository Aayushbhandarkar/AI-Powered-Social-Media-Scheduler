const { GoogleGenerativeAI } = require("@google/generative-ai");

// Check if we have the API key
console.log('🔑 GEMINI_API_KEY exists:', !!process.env.GEMINI_API_KEY);
if (process.env.GEMINI_API_KEY) {
  console.log('🔑 API Key starts with:', process.env.GEMINI_API_KEY.substring(0, 10) + '...');
}

let genAI;
try {
  if (process.env.GEMINI_API_KEY) {
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    console.log('✅ Gemini AI initialized successfully');
  } else {
    console.log('⚠️ GEMINI_API_KEY not found, using mock responses');
  }
} catch (error) {
  console.error('❌ Failed to initialize Gemini AI:', error);
}

const generateContent = async (req, res) => {
  console.log('📨 Received chatbot request from user:', req.user?.id);
  console.log('📝 Prompt:', req.body.prompt);
  
  try {
    const { prompt, platform = "general", tone = "engaging", context = [] } = req.body;

    // Validate input
    if (!prompt || typeof prompt !== "string" || prompt.trim() === "") {
      return res.status(400).json({
        success: false,
        error: "Prompt is required and must be a non-empty string",
      });
    }

    // If Gemini AI is not available, use mock response
    if (!genAI) {
      console.log('🔄 Using mock response (Gemini not configured)');
      const mockResponse = `Here's your social media content for ${platform}:

🎉 ${prompt}

This is a ${tone} post generated by our AI assistant.

#${platform} #socialmedia #content #engagement`;

      return res.json({
        success: true,
        data: {
          response: mockResponse,
          prompt: prompt,
          platform: platform,
          tone: tone,
          note: 'mock_response_gemini_not_configured'
        },
      });
    }

    console.log('🤖 Using Gemini model: gemini-1.5-flash');
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    // Simplified prompt
    const fullPrompt = `Create a ${tone} social media post for ${platform} about: ${prompt}. Include relevant hashtags.`;

    console.log('📤 Sending request to Gemini API...');
    
    const result = await model.generateContent(fullPrompt);
    const text = result.response.text() || "I couldn't generate a response. Please try again.";
    
    console.log('✅ Successfully generated content, length:', text.length);

    res.json({
      success: true,
      data: {
        response: text,
        prompt: prompt,
        platform: platform,
        tone: tone,
      },
    });

  } catch (error) {
    console.error("❌ AI Generation Error:", error.message);

    // If Gemini fails, fall back to mock response
    console.log('🔄 Falling back to mock response due to error');
    const mockResponse = `Here's your social media content for ${req.body.platform || 'general'}:

📱 ${req.body.prompt}

This is a ${req.body.tone || 'engaging'} post. 

#socialmedia #content #aiassistant`;

    res.json({
      success: true,
      data: {
        response: mockResponse,
        prompt: req.body.prompt,
        platform: req.body.platform || 'general',
        tone: req.body.tone || 'engaging',
        note: 'fallback_response'
      },
    });
  }
};

const healthCheck = async (req, res) => {
  try {
    const geminiStatus = genAI ? 'configured' : 'not_configured';
    const hasApiKey = !!process.env.GEMINI_API_KEY;
    
    res.json({ 
      status: 'healthy', 
      gemini: geminiStatus,
      has_api_key: hasApiKey,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.json({ 
      status: 'healthy', 
      gemini: 'error',
      error: error.message 
    });
  }
};

module.exports = {
  generateContent,
  healthCheck
};
